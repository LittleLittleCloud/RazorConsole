@using System.Threading.Tasks
@using RazorConsole.Components
@using Spectre.Console

<Panel Title="TextButton" Border="@BoxBorder.Rounded" Expand="false">
    <Padder Padding="@_outerPadding">
        <Rows>
            <Markup Content="TextButton renders clickable text with customizable focus and background colors." Foreground="@Color.Grey70" />
            <Newline />
            <Markup Content="Example" Decoration="@Decoration.Bold" />
            <Padder Padding="@_examplePadding">
                <Columns>
                    <TextButton Content="@_buttonLabel"
                                BackgroundColor="@_restingColor"
                                FocusedColor="@Color.DeepSkyBlue1"
                                OnClick="ToggleAsync" />
                    <Markup Content="@_status" Foreground="@_statusColor" Decoration="@_statusDecoration" />
                </Columns>
            </Padder>
            <Newline />
            <Markup Content="Documentation: TextButton.razor" Foreground="@Color.DeepSkyBlue1" Decoration="@Decoration.Underline" link="@DocumentationUrl" />
        </Rows>
    </Padder>
</Panel>

@code {
    private static readonly Padding _outerPadding = new(1, 1, 1, 1);
    private static readonly Padding _examplePadding = new(0, 1, 0, 0);

    private const string DocumentationUrl = "https://github.com/LittleLittleCloud/RazorConsole/blob/main/src/RazorConsole.Core/Components/TextButton.razor";

    private bool _isActive;
    private string _buttonLabel = "Toggle";
    private string _status = "Button is off.";
    private Color _statusColor = Color.Grey70;
    private Decoration _statusDecoration = Decoration.Italic;
    private Color _restingColor = Color.Black;

    private Task ToggleAsync()
    {
        _isActive = !_isActive;
        _buttonLabel = _isActive ? "Disable" : "Toggle";
        _status = _isActive ? "Button switched on." : "Button is off.";
        _statusColor = _isActive ? Color.Chartreuse1 : Color.Grey70;
        _statusDecoration = _isActive ? Decoration.Bold : Decoration.Italic;
        _restingColor = _isActive ? Color.DarkOliveGreen3 : Color.Black;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
